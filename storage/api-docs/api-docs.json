{
    "openapi": "3.0.0",
    "info": {
        "title": "Kouvee Petshop Documentation",
        "contact": {
            "name": "Natan Hari P.",
            "email": "natanhp@protonmail.com"
        },
        "version": "1.0.0"
    },
    "paths": {
        "/api/v1/login": {
            "post": {
                "tags": [
                    "employees"
                ],
                "summary": "Employee login",
                "operationId": "App\\Http\\Controllers\\AuthController::authenticate",
                "requestBody": {
                    "description": "Input data format",
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "username": {
                                        "description": "The username of the employee",
                                        "type": "string"
                                    },
                                    "password": {
                                        "description": "The password of the employee",
                                        "type": "password"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "400": {
                        "description": "Error"
                    }
                }
            }
        },
        "/api/v1/customers/getall": {
            "get": {
                "tags": [
                    "customers"
                ],
                "description": "Get all customers",
                "operationId": "App\\Http\\Controllers\\CustomersController::getAll",
                "responses": {
                    "default": {
                        "description": "Get all customers"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/customers/insert": {
            "post": {
                "tags": [
                    "customers"
                ],
                "summary": "Insert a new customer",
                "operationId": "App\\Http\\Controllers\\CustomersController::insert",
                "requestBody": {
                    "description": "Input data format",
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "name": {
                                        "description": "The name of the customer",
                                        "type": "string"
                                    },
                                    "address": {
                                        "description": "The address of the customer",
                                        "type": "string"
                                    },
                                    "dateBirth": {
                                        "description": "The birth date of the customer",
                                        "type": "string"
                                    },
                                    "phoneNumber": {
                                        "description": "The phone number of the customer",
                                        "type": "string"
                                    },
                                    "createdBy": {
                                        "description": "The foreign key of the owner who creates the customer",
                                        "type": "integer"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "400": {
                        "description": "Error"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/customers/getbyid/{id}": {
            "get": {
                "tags": [
                    "customers"
                ],
                "description": "Get a customer by id",
                "operationId": "App\\Http\\Controllers\\CustomersController::getCustomerById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of customer",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "Get a customer by id"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/customers/update": {
            "post": {
                "tags": [
                    "customers"
                ],
                "summary": "Update a customer",
                "operationId": "App\\Http\\Controllers\\CustomersController::update",
                "requestBody": {
                    "description": "Input data format",
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "id": {
                                        "description": "The id of the customer",
                                        "type": "integer"
                                    },
                                    "name": {
                                        "description": "The name of the customer",
                                        "type": "string"
                                    },
                                    "address": {
                                        "description": "The address of the customer",
                                        "type": "string"
                                    },
                                    "dateBirth": {
                                        "description": "The birth date of the customer",
                                        "type": "string"
                                    },
                                    "phoneNumber": {
                                        "description": "The phone number of the customer",
                                        "type": "string"
                                    },
                                    "updatedBy": {
                                        "description": "The foreign key of the owner who updates the customer",
                                        "type": "integer"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "400": {
                        "description": "Error"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/customers/delete/{id}/{ownerId}": {
            "delete": {
                "tags": [
                    "customers"
                ],
                "summary": "Deletes a customer",
                "operationId": "App\\Http\\Controllers\\CustomersController::delete",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Customer id to delete",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "ownerId",
                        "in": "path",
                        "description": "Owner who delted the customer",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Customer not deleted it's because either the deletion failed or customer to be deleted not found"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/customers/restore/{id}": {
            "get": {
                "tags": [
                    "customers"
                ],
                "description": "Restore the delted customer",
                "operationId": "App\\Http\\Controllers\\CustomersController::restore",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of customer",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "Restore the deleted customer"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/customers/getallpets/{id}": {
            "get": {
                "tags": [
                    "customers"
                ],
                "description": "Get all of the customer's pets by customer id",
                "operationId": "App\\Http\\Controllers\\CustomersController::getAllCustomerPetsByCustomerId",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of customer",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "All of customer's pets"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/employees/getall": {
            "get": {
                "tags": [
                    "employees"
                ],
                "description": "Get all employees",
                "operationId": "App\\Http\\Controllers\\EmployeesController::getAll",
                "responses": {
                    "default": {
                        "description": "Get all employees"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/employees/insert": {
            "post": {
                "tags": [
                    "employees"
                ],
                "summary": "Insert a new employee",
                "operationId": "App\\Http\\Controllers\\EmployeesController::insert",
                "requestBody": {
                    "description": "Input data format",
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "name": {
                                        "description": "The name of the employee",
                                        "type": "string"
                                    },
                                    "address": {
                                        "description": "The address of the employee",
                                        "type": "string"
                                    },
                                    "dateBirth": {
                                        "description": "The birth date of the employee",
                                        "type": "string"
                                    },
                                    "phoneNumber": {
                                        "description": "The phone number of the emploeyee",
                                        "type": "string"
                                    },
                                    "role": {
                                        "description": "The role of the employee",
                                        "type": "string"
                                    },
                                    "username": {
                                        "description": "The username of the employee",
                                        "type": "string"
                                    },
                                    "password": {
                                        "description": "The password of the employee",
                                        "type": "string"
                                    },
                                    "createdBy": {
                                        "description": "The foreign key of the owner who creates the employee",
                                        "type": "integer"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "400": {
                        "description": "Error"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/employees/getbyid/{id}": {
            "get": {
                "tags": [
                    "employees"
                ],
                "description": "Get an employee by id",
                "operationId": "App\\Http\\Controllers\\EmployeesController::getEmployeeById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of employee",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "Get an employee by id"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/employees/update": {
            "post": {
                "tags": [
                    "employees"
                ],
                "summary": "Update an employee",
                "operationId": "App\\Http\\Controllers\\EmployeesController::update",
                "requestBody": {
                    "description": "Input data format",
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "id": {
                                        "description": "The id of the employee",
                                        "type": "integer"
                                    },
                                    "name": {
                                        "description": "The name of the employee",
                                        "type": "string"
                                    },
                                    "address": {
                                        "description": "The address of the employee",
                                        "type": "string"
                                    },
                                    "dateBirth": {
                                        "description": "The birth date of the employee",
                                        "type": "string"
                                    },
                                    "phoneNumber": {
                                        "description": "The phone number of the emploeyee",
                                        "type": "string"
                                    },
                                    "role": {
                                        "description": "The role of the employee",
                                        "type": "string"
                                    },
                                    "username": {
                                        "description": "The username of the employee",
                                        "type": "string"
                                    },
                                    "password": {
                                        "description": "The password of the employee",
                                        "type": "string"
                                    },
                                    "updatedBy": {
                                        "description": "The foreign key of the owner who updates the employee",
                                        "type": "integer"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "400": {
                        "description": "Error"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/employees/delete/{id}/{ownerId}": {
            "delete": {
                "tags": [
                    "employees"
                ],
                "summary": "Deletes an employee",
                "operationId": "App\\Http\\Controllers\\EmployeesController::delete",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Employee id to delete",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "ownerId",
                        "in": "path",
                        "description": "Owner who delted the employee",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Employee not deleted it's because either the deletion failed or employee to be deleted not found"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/employees/restore/{id}": {
            "get": {
                "tags": [
                    "employees"
                ],
                "description": "Restore the delted employee",
                "operationId": "App\\Http\\Controllers\\EmployeesController::restore",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of employee",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "Restore the deleted employee"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/noa/products/getall": {
            "get": {
                "tags": [
                    "products"
                ],
                "description": "Get all products",
                "operationId": "App\\Http\\Controllers\\ProductsController::getAll",
                "responses": {
                    "default": {
                        "description": "Get all products"
                    }
                }
            }
        },
        "/api/v1/products/insert": {
            "post": {
                "tags": [
                    "products"
                ],
                "summary": "Insert a new product",
                "operationId": "App\\Http\\Controllers\\ProductsController::insert",
                "requestBody": {
                    "description": "Input data format",
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "properties": {
                                    "productName": {
                                        "description": "The name of the product",
                                        "type": "string"
                                    },
                                    "productQuantity": {
                                        "description": "The quantity of the product",
                                        "type": "integer"
                                    },
                                    "productPrice": {
                                        "description": "The price of the product",
                                        "type": "double"
                                    },
                                    "meassurement": {
                                        "description": "The meassurement of the product e.g kg, pcs, liter",
                                        "type": "string"
                                    },
                                    "createdBy": {
                                        "description": "The foreign key of the owner who creates the product",
                                        "type": "integer"
                                    },
                                    "image": {
                                        "description": "The image of the product (65Kb)",
                                        "type": "file",
                                        "items": {
                                            "type": "string",
                                            "format": "binary"
                                        }
                                    },
                                    "minimumQty": {
                                        "description": "The minimum quantity of the product",
                                        "type": "integer"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "400": {
                        "description": "Error"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/noa/products/getbyid/{id}": {
            "get": {
                "tags": [
                    "products"
                ],
                "description": "Get a product by id",
                "operationId": "App\\Http\\Controllers\\ProductsController::getProductById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of products",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "Get a products by id"
                    }
                }
            }
        },
        "/api/v1/noa/products/getimagebyid/{id}": {
            "get": {
                "tags": [
                    "products"
                ],
                "description": "Get a product image by id",
                "operationId": "App\\Http\\Controllers\\ProductsController::getProductImageById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of products",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "Get a products by id"
                    }
                }
            }
        },
        "/api/v1/products/update": {
            "post": {
                "tags": [
                    "products"
                ],
                "summary": "Update a product",
                "operationId": "App\\Http\\Controllers\\ProductsController::update",
                "requestBody": {
                    "description": "Input data format",
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "properties": {
                                    "id": {
                                        "description": "The id of the product",
                                        "type": "integer"
                                    },
                                    "productName": {
                                        "description": "The name of the product",
                                        "type": "string"
                                    },
                                    "productQuantity": {
                                        "description": "The quantity of the product",
                                        "type": "integer"
                                    },
                                    "productPrice": {
                                        "description": "The price of the product",
                                        "type": "double"
                                    },
                                    "meassurement": {
                                        "description": "The meassurement of the product e.g kg, pcs, liter",
                                        "type": "string"
                                    },
                                    "updatedBy": {
                                        "description": "The foreign key of the owner who updates the product",
                                        "type": "integer"
                                    },
                                    "image": {
                                        "description": "The image of the product (65Kb)",
                                        "type": "string",
                                        "format": "binary"
                                    },
                                    "minimumQty": {
                                        "description": "The minimum quantity of the product",
                                        "type": "integer"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "400": {
                        "description": "Error"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/products/delete/{id}/{ownerId}": {
            "delete": {
                "tags": [
                    "products"
                ],
                "summary": "Deletes a product",
                "operationId": "App\\Http\\Controllers\\ProductsController::delete",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Product id to delete",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "ownerId",
                        "in": "path",
                        "description": "Owner who delted the product",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Product not deleted it's because either the deletion failed or product to be deleted not found"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/products/restore/{id}": {
            "get": {
                "tags": [
                    "products"
                ],
                "description": "Restore the delted product",
                "operationId": "App\\Http\\Controllers\\ProductsController::restore",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of product",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "Restore the deleted product"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/noa/products/getbyname/{name}": {
            "get": {
                "tags": [
                    "products"
                ],
                "description": "Get a product by name",
                "operationId": "App\\Http\\Controllers\\ProductsController::getProductByName",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "Name of the products",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "Get products by name"
                    }
                }
            }
        },
        "/api/v1/services/getall": {
            "get": {
                "tags": [
                    "services"
                ],
                "description": "Get all services",
                "operationId": "App\\Http\\Controllers\\ServicesController::getAll",
                "responses": {
                    "default": {
                        "description": "Get all services"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/services/insert": {
            "post": {
                "tags": [
                    "services"
                ],
                "summary": "Insert a new service",
                "operationId": "App\\Http\\Controllers\\ServicesController::insert",
                "requestBody": {
                    "description": "Input data format",
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "name": {
                                        "description": "The name of the customer",
                                        "type": "string"
                                    },
                                    "address": {
                                        "description": "The address of the customer",
                                        "type": "string"
                                    },
                                    "dateBirth": {
                                        "description": "The birth date of the customer",
                                        "type": "string"
                                    },
                                    "phoneNumber": {
                                        "description": "The phone number of the customer",
                                        "type": "string"
                                    },
                                    "createdBy": {
                                        "description": "The foreign key of the owner who creates the customer",
                                        "type": "integer"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "400": {
                        "description": "Error"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/services/getbyid/{id}": {
            "get": {
                "tags": [
                    "services"
                ],
                "description": "Get an service by id",
                "operationId": "App\\Http\\Controllers\\ServicesController::getServiceById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of customer",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "Get a service by id"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/services/update": {
            "post": {
                "tags": [
                    "services"
                ],
                "summary": "Update a service",
                "operationId": "App\\Http\\Controllers\\ServicesController::update",
                "requestBody": {
                    "description": "Input data format",
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "id": {
                                        "description": "The id of the customer",
                                        "type": "integer"
                                    },
                                    "name": {
                                        "description": "The name of the customer",
                                        "type": "string"
                                    },
                                    "address": {
                                        "description": "The address of the customer",
                                        "type": "string"
                                    },
                                    "dateBirth": {
                                        "description": "The birth date of the customer",
                                        "type": "string"
                                    },
                                    "phoneNumber": {
                                        "description": "The phone number of the customer",
                                        "type": "string"
                                    },
                                    "updatedBy": {
                                        "description": "The foreign key of the owner who updates the service",
                                        "type": "integer"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "400": {
                        "description": "Error"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/services/delete/{id}/{ownerId}": {
            "delete": {
                "tags": [
                    "services"
                ],
                "summary": "Deletes a service",
                "operationId": "App\\Http\\Controllers\\ServicesController::delete",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Customer id to delete",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "ownerId",
                        "in": "path",
                        "description": "Owner who delted the customer",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Customer not deleted it's because either the deletion failed or customer to be deleted not found"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/services/restore/{id}": {
            "get": {
                "tags": [
                    "services"
                ],
                "description": "Restore the delted service",
                "operationId": "App\\Http\\Controllers\\ServicesController::restore",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of customer",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "Restore the deleted customer"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/suppliers/getall": {
            "get": {
                "tags": [
                    "suppliers"
                ],
                "description": "Get all suppliers",
                "operationId": "App\\Http\\Controllers\\SuppliersController::getAll",
                "responses": {
                    "default": {
                        "description": "Get all suppliers"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/suppliers/insert": {
            "post": {
                "tags": [
                    "suppliers"
                ],
                "summary": "Insert a new supplier",
                "operationId": "App\\Http\\Controllers\\SuppliersController::insert",
                "requestBody": {
                    "description": "Input data format",
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "name": {
                                        "description": "The name of the supplier",
                                        "type": "string"
                                    },
                                    "address": {
                                        "description": "The address of the supplier",
                                        "type": "string"
                                    },
                                    "phoneNumber": {
                                        "description": "The phone number of the supplier",
                                        "type": "string"
                                    },
                                    "createdBy": {
                                        "description": "The foreign key of the owner who creates the supplier",
                                        "type": "integer"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "400": {
                        "description": "Error"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/suppliers/getbyid/{id}": {
            "get": {
                "tags": [
                    "suppliers"
                ],
                "description": "Get an supplier by id",
                "operationId": "App\\Http\\Controllers\\SuppliersController::getSupplierById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of supplier",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "Get a supplier by id"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/suppliers/update": {
            "post": {
                "tags": [
                    "suppliers"
                ],
                "summary": "Update a supplier",
                "operationId": "App\\Http\\Controllers\\SuppliersController::update",
                "requestBody": {
                    "description": "Input data format",
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "id": {
                                        "description": "The id of the supplier",
                                        "type": "integer"
                                    },
                                    "name": {
                                        "description": "The name of the supplier",
                                        "type": "string"
                                    },
                                    "address": {
                                        "description": "The address of the supplier",
                                        "type": "string"
                                    },
                                    "phoneNumber": {
                                        "description": "The phone number of the supplier",
                                        "type": "string"
                                    },
                                    "updatedBy": {
                                        "description": "The foreign key of the owner who updates the supplier",
                                        "type": "integer"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "400": {
                        "description": "Error"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/suppliers/delete/{id}/{ownerId}": {
            "delete": {
                "tags": [
                    "suppliers"
                ],
                "summary": "Deletes an supplier",
                "operationId": "App\\Http\\Controllers\\SuppliersController::delete",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Supplier id to delete",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "ownerId",
                        "in": "path",
                        "description": "Owner who delted the supplier",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Supplier not deleted it's because either the deletion failed or supplier to be deleted not found"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/suppliers/restore/{id}": {
            "get": {
                "tags": [
                    "suppliers"
                ],
                "description": "Restore the delted supplier",
                "operationId": "App\\Http\\Controllers\\SuppliersController::restore",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of supplier",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "Restored the deleted supplier"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        }
    },
    "components": {
        "securitySchemes": {
            "bearerAuth": {
                "type": "http",
                "name": "Authorization",
                "in": "header",
                "bearerFormat": "JWT",
                "scheme": "bearer"
            }
        }
    }
}